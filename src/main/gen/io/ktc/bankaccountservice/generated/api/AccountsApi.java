/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.ktc.bankaccountservice.generated.api;

import io.ktc.bankaccountservice.generated.model.BankAccount;
import io.ktc.bankaccountservice.generated.model.DepositRequest;
import io.ktc.bankaccountservice.generated.model.Error;
import io.ktc.bankaccountservice.generated.model.GetTransactionsResponse;
import io.ktc.bankaccountservice.generated.model.Transaction;
import io.ktc.bankaccountservice.generated.model.WithdrawRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-08T02:03:15.863528+01:00[Europe/Paris]")
@Validated
@Tag(name = "bankAccounts", description = "methods that provide access to information and operations relating to bank accounts")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accounts/{accountId}/deposit : Deposit money from account identified by id
     * Deposit money from account identified by id
     *
     * @param accountId ID of account to return (required)
     * @param depositRequest deposit request (required)
     * @return Deposit successfully done (status code 201)
     *         or Bad Gateway error (status code 502)
     */
    @Operation(
        operationId = "deposit",
        summary = "Deposit money from account identified by id",
        description = "Deposit money from account identified by id",
        tags = { "bankAccounts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Deposit successfully done", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "502", description = "Bad Gateway error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{accountId}/deposit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Transaction> deposit(
        @Parameter(name = "accountId", description = "ID of account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "DepositRequest", description = "deposit request", required = true) @Valid @RequestBody DepositRequest depositRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{accountId} : Find bank account by ID
     * Return a specific bank account by its ID.
     *
     * @param accountId ID of account to return (required)
     * @return Bank account successfully found (status code 200)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "findAccountById",
        summary = "Find bank account by ID",
        description = "Return a specific bank account by its ID.",
        tags = { "bankAccounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account successfully found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccount.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{accountId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BankAccount> findAccountById(
        @Parameter(name = "accountId", description = "ID of account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 6.027456183070403, \"id\" : 0, \"transactions\" : [ { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }, { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts : Find all bank accounts
     * Find all bank accounts
     *
     * @return Bank accounts successfully retrieved (status code 200)
     *         or Bad Gateway error (status code 502)
     */
    @Operation(
        operationId = "findBankAccounts",
        summary = "Find all bank accounts",
        description = "Find all bank accounts",
        tags = { "bankAccounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank accounts successfully retrieved", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BankAccount.class)))
            }),
            @ApiResponse(responseCode = "502", description = "Bad Gateway error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<BankAccount>> findBankAccounts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"balance\" : 6.027456183070403, \"id\" : 0, \"transactions\" : [ { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }, { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 } ] }, { \"balance\" : 6.027456183070403, \"id\" : 0, \"transactions\" : [ { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }, { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{accountId}/transactions : List all transactions of an account identified by its id
     * List all transactions of an account identified by its id
     *
     * @param accountId ID of account to return (required)
     * @return Transactions of an account retrieved (status code 200)
     *         or Bad Gateway error (status code 502)
     */
    @Operation(
        operationId = "listTransactions",
        summary = "List all transactions of an account identified by its id",
        description = "List all transactions of an account identified by its id",
        tags = { "bankAccounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transactions of an account retrieved", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTransactionsResponse.class))
            }),
            @ApiResponse(responseCode = "502", description = "Bad Gateway error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{accountId}/transactions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetTransactionsResponse> listTransactions(
        @Parameter(name = "accountId", description = "ID of account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"items\" : [ { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }, { \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts/{accountId}/withdrawal : Withdraw money from account identified by id
     * Withdraw money from account identified by id
     *
     * @param accountId ID of account to return (required)
     * @param withdrawRequest withdrawal request (required)
     * @return Withdraw successfully done (status code 201)
     *         or Bad Gateway error (status code 502)
     */
    @Operation(
        operationId = "withdrawal",
        summary = "Withdraw money from account identified by id",
        description = "Withdraw money from account identified by id",
        tags = { "bankAccounts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Withdraw successfully done", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "502", description = "Bad Gateway error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{accountId}/withdrawal",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Transaction> withdrawal(
        @Parameter(name = "accountId", description = "ID of account to return", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "WithdrawRequest", description = "withdrawal request", required = true) @Valid @RequestBody WithdrawRequest withdrawRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"amount\" : 5.962133916683182, \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 5, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
